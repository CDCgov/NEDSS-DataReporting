





CREATE PROCEDURE dbo.[sp_D_LAB100]
  @batch_id BIGINT
 as

  BEGIN

  --
--UPDATE ACTIVITY_LOG_DETAIL SET
--START_DATE=DATETIME();
-- dec
    DECLARE @RowCount_no INT ;
    DECLARE @Table_RowCount_no INT ;
    DECLARE @Proc_Step_no FLOAT = 0 ;
    DECLARE @Proc_Step_Name VARCHAR(200) = '' ;
	DECLARE @batch_start_time datetime2(7) = null ;
	DECLARE @batch_end_time datetime2(7) = null ;

 BEGIN TRY

	SET @Proc_Step_no = 1;
	SET @Proc_Step_Name = 'SP_Start';




	BEGIN TRANSACTION;

             SELECT @ROWCOUNT_NO = 0;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;


			SELECT @batch_start_time = batch_start_dttm,
						   @batch_end_time = batch_end_dttm
					FROM dbo.[job_batch_log]
					WHERE type_code = 'MasterETL'
						  AND status_type = 'start';





			with lst as (select top 2 LAB_RPT_LOCAL_ID
				from rdb..LAB100)
				select @Table_RowCount_no = count(*) from lst
				;

           if @Table_RowCount_no > 0
		   BEGIN
			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING TMP_LABTEST_LABTESTRESULT';



				IF OBJECT_ID('rdb.dbo.TMP_LABTEST_LABTESTRESULT', 'U') IS NOT NULL
						 drop table rdb..TMP_LABTEST_LABTESTRESULT
						;




				select lt.*
				--      ,[LAB_TEST_UID]
					  ,[RESULT_COMMENT_GRP_KEY]
					  ,[TEST_RESULT_GRP_KEY]
					  ,[PERFORMING_LAB_KEY]
					  ,[PATIENT_KEY]
					  ,[COPY_TO_PROVIDER_KEY]
					  ,[LAB_TEST_TECHNICIAN_KEY]
					  ,[SPECIMEN_COLLECTOR_KEY]
					  ,[ORDERING_ORG_KEY]
					  ,[REPORTING_LAB_KEY]
					  ,[CONDITION_KEY]
					  ,[LAB_RPT_DT_KEY]
					  ,[MORB_RPT_KEY]
					  ,[INVESTIGATION_KEY]
					  ,[LDF_GROUP_KEY]
					  ,[ORDERING_PROVIDER_KEY]
				 --     ,[RECORD_STATUS_CD]
				      ,order_oid as oid
					  , [LAB_RPT_CREATED_BY_MERGE]	 as LAB_RPT_CREATED_BY
                      ,[ACCESSION_NBR_merge] as ACCESSION_NBR

				into rdb..TMP_LABTEST_LABTESTRESULT
				from RDB..TMP_D_LAB_TEST_N LT
					 left outer join RDB..LAB_TEST_RESULT  ltr on lt.[LAB_TEST_KEY] = ltr.[LAB_TEST_KEY]
				 --where lt.RDB_LAST_REFRESH_TIME  >= @batch_start_time	AND lt.RDB_LAST_REFRESH_TIME <  @batch_end_time
				where lt.LAB_TEST_KEY <> 1
				  ;

		     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;
		END ;


		if @Table_RowCount_no = 0
		   BEGIN
			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING ENTIRE TMP_LABTEST_LABTESTRESULT';



				IF OBJECT_ID('rdb.dbo.TMP_LABTEST_LABTESTRESULT', 'U') IS NOT NULL
						 drop table rdb..TMP_LABTEST_LABTESTRESULT
						;



				select lt.*
				--      ,[LAB_TEST_UID]
					  ,[RESULT_COMMENT_GRP_KEY]
					  ,[TEST_RESULT_GRP_KEY]
					  ,[PERFORMING_LAB_KEY]
					  ,[PATIENT_KEY]
					  ,[COPY_TO_PROVIDER_KEY]
					  ,[LAB_TEST_TECHNICIAN_KEY]
					  ,[SPECIMEN_COLLECTOR_KEY]
					  ,[ORDERING_ORG_KEY]
					  ,[REPORTING_LAB_KEY]
					  ,[CONDITION_KEY]
					  ,[LAB_RPT_DT_KEY]
					  ,[MORB_RPT_KEY]
					  ,[INVESTIGATION_KEY]
					  ,[LDF_GROUP_KEY]
					  ,[ORDERING_PROVIDER_KEY]
				 --     ,[RECORD_STATUS_CD]
				      , oid as order_oid
					  , LAB_RPT_CREATED_BY as  [LAB_RPT_CREATED_BY_MERGE]
                      ,ACCESSION_NBR as [ACCESSION_NBR_merge]

				into rdb..TMP_LABTEST_LABTESTRESULT
				from RDB..LAB_TEST LT
					 left outer join RDB..LAB_TEST_RESULT  ltr on lt.[LAB_TEST_KEY] = ltr.[LAB_TEST_KEY]
				 --where lt.RDB_LAST_REFRESH_TIME  >= @batch_start_time	AND lt.RDB_LAST_REFRESH_TIME <  @batch_end_time
				where lt.LAB_TEST_KEY <> 1
				  ;
		     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;
		END ;


			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING TMP_LABTEST_ORDER';




				create index idx_TMP_LABTEST_LABTESTRESULT_type on rdb..TMP_LABTEST_LABTESTRESULT(lab_test_type);

      		IF OBJECT_ID('rdb.dbo.TMP_LABTEST_ORDER', 'U') IS NOT NULL
				 drop table rdb..TMP_LABTEST_ORDER;


				select
					LAB_TEST_STATUS , LAB_TEST_KEY , LAB_RPT_LOCAL_ID , REASON_FOR_TEST_DESC ,
					RECORD_STATUS_CD ,
					[LAB_RPT_UID] as ORDERED_RPT_UID ,
					LAB_TEST_CD as ORDERED_LAB_TEST_CD ,
					LAB_TEST_CD_DESC as ORDERED_LAB_TEST_CD_DESC ,
					LAB_TEST_CD_SYS_CD as ORDERED_TEST_CODE ,
					LAB_TEST_CD_SYS_NM as ORDERED_LABTEST_CD_SYS_NM ,
					 SPECIMEN_DETAILS ,
					 LAB_TEST_UID as ORDERED_TEST_UID ,
					SPECIMEN_ADD_TIME , SPECIMEN_LAST_CHANGE_TIME ,
					 ORDERING_ORG_KEY ,
					REPORTING_LAB_KEY as REPORTING_LAB_KEY_ORDER ,
					CONDITION_KEY , INVESTIGATION_KEY , ORDERING_PROVIDER_KEY , LAB_RPT_STATUS ,
					null as OID ,
					CONDITION_CD ,
					REASON_FOR_TEST_DESC as REASON_FOR_TEST_DESC1 ,
					SPECIMEN_SRC as SPECIMEN_SRC_CD ,
					SPECIMEN_DESC as  SPECIMEN_SRC_DESC ,
					 LDF_GROUP_KEY
					, MORB_RPT_KEY , PATIENT_KEY ,
					'' as DOCUMENT_LINK,   -- VS,
					ALT_LAB_TEST_CD_SYS_CD,
					ALT_LAB_TEST_CD_SYS_NM
					lab_test_type
				into rdb..TMP_LABTEST_ORDER
				from  rdb..TMP_LABTEST_LABTESTRESULT
				where lab_test_type = 'Order'
				;



				/*
LABTEST_RESULT (KEEP=LAB_TEST_KEY LAB_RPT_LOCAL_ID TEST_METHOD_CD TEST_METHOD_CD_DESC RESULTED_LAB_TEST_CD
				ELR_IND RESULTED_RPT_UID RESULTED_TEST INTERPRETATION_FLG LAB_RPT_RECEIVED_BY_PH_DT LAB_RPT_CREATED_DT
				LAB_RPT_CREATED_BY LAB_TEST_DT
				LAB_RPT_LAST_UPDATE_DT JURISDICTION_CD LAB_TEST_CD_SYS_NM JURISDICTION_NM OID
				ACCESSION_NBR SPECIMEN_SRC SPECIMEN_DESC SPECIMEN_SITE SPECIMEN_SITE_DESC
				SPECIMEN_COLLECTION_DT RESULTED_TEST_UID ROOT_ORDERED_TEST_PNTR PARENT_TEST_PNTR
				LAB_RPT_DT_KEY RESULT_COMMENT_GRP_KEY TEST_RESULT_GRP_KEY  PERFORMING_LAB_KEY
				LAB_RPT_LAST_UPDATE_BY ALT_LAB_TEST_CD ALT_LAB_TEST_CD_DESC  ALT_LAB_TEST_CD_SYS_CD ALT_LAB_TEST_CD_SYS_NM
				RESULTED_LAB_TEST_CD_DESC RESULTEDTEST_CD_SYS_NM RESULT_TEST_METHOD_CD
				 RESULTED_LAB_TEST_KEY);

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING TMP_LABTEST_RESULT';


		IF OBJECT_ID('rdb.dbo.TMP_LABTEST_RESULT', 'U') IS NOT NULL
				 drop table rdb..TMP_LABTEST_RESULT ;



				select
				 LAB_TEST_KEY , LAB_RPT_LOCAL_ID , TEST_METHOD_CD ,
				 TEST_METHOD_CD_DESC ,
				 LAB_TEST_CD as RESULTED_LAB_TEST_CD ,
				 ELR_IND ,
				 [LAB_RPT_UID] as RESULTED_RPT_UID ,
				 LAB_TEST_CD_DESC as RESULTED_TEST , -- VS
				 INTERPRETATION_FLG ,
				 LAB_RPT_RECEIVED_BY_PH_DT ,
				 [LAB_RPT_CREATED_DT]     as LAB_RPT_CREATED_DT,
				 LAB_RPT_CREATED_BY ,
				 LAB_TEST_DT,
				 LAB_RPT_LAST_UPDATE_DT ,
				 JURISDICTION_CD , LAB_TEST_CD_SYS_NM ,
				 JURISDICTION_NM ,
				 OID,
				 ACCESSION_NBR ,
				 SPECIMEN_SRC , SPECIMEN_DESC , SPECIMEN_SITE ,
				 SPECIMEN_SITE_DESC,
				 SPECIMEN_COLLECTION_DT ,
				 [LAB_TEST_UID] as RESULTED_TEST_UID ,
				 ROOT_ORDERED_TEST_PNTR ,
				 PARENT_TEST_PNTR,
				  LAB_RPT_DT_KEY ,
				 RESULT_COMMENT_GRP_KEY , TEST_RESULT_GRP_KEY ,
				 [LAB_RPT_LAST_UPDATE_BY] as PERFORMING_LAB_KEY,
				 LAB_RPT_LAST_UPDATE_BY ,
				 ALT_LAB_TEST_CD , ALT_LAB_TEST_CD_DESC ,
				 ALT_LAB_TEST_CD_SYS_CD , ALT_LAB_TEST_CD_SYS_NM ,
				 [LAB_TEST_CD_DESC]    as RESULTED_LAB_TEST_CD_DESC ,
				 [LAB_TEST_CD_SYS_NM]  as RESULTEDTEST_CD_SYS_NM ,
				 [TEST_METHOD_CD]      as RESULT_TEST_METHOD_CD ,
				 [LAB_TEST_KEY]        as RESULTED_LAB_TEST_KEY,
				 lab_test_type
				into rdb..TMP_LABTEST_RESULT
				from  rdb..TMP_LABTEST_LABTESTRESULT
				where lab_test_type = 'Result'
				;




				/*
				SET LABTEST_LABTESTRESULT;


				IF LAB_TEST_TYPE = 'Order' THEN
				 DO;

				  ORDERED_LAB_TEST_CD=LAB_TEST_CD;

				  ORDERED_LAB_TEST_CD_DESC=LAB_TEST_CD_DESC;

				  ORDERED_TEST_CODE=LAB_TEST_CD_SYS_CD;

				  ORDERED_LABTEST_CD_SYS_NM=LAB_TEST_CD_SYS_NM;

				  ORDERED_TEST_UID=LAB_TEST_UID;

				  ORDERED_RPT_UID=LAB_RPT_UID;

				  LAB_RPT_STATUS=LAB_RPT_STATUS;

				  DOCUMENT_LINK=DOCUMENT_LINK;

				  ALT_LAB_TEST_CD_SYS_CD=ALT_LAB_TEST_CD_SYS_CD;

				  ALT_LAB_TEST_CD_SYS_NM=ALT_LAB_TEST_CD_SYS_NM;

				  SPECIMEN_SRC_CD=SPECIMEN_SRC;

				  SPECIMEN_SRC_DESC=SPECIMEN_DESC;

				  OUTPUT LABTEST_ORDER;

				 END;



				ELSE IF LAB_TEST_TYPE = 'Result' THEN
				 DO;

				  RESULTED_TEST=LAB_TEST_CD_DESC;

				  RESULTED_TEST_UID=LAB_TEST_UID;

				  RESULTED_RPT_UID=LAB_RPT_UID;

				  RESULTED_LAB_TEST_CD =LAB_TEST_CD;

				  RESULTED_LAB_TEST_CD_DESC=LAB_TEST_CD_DESC;

				  RESULTEDTEST_CD_SYS_NM=LAB_TEST_CD_SYS_NM;

				  RESULT_TEST_METHOD_CD=TEST_METHOD_CD;

				  RESULTEDTEST_VAL_CD=TEST_RESULT_VAL_CD;

				  RESULTEDTEST_VAL_CD_DESC=TEST_RESULT_VAL_CD_DESC;

				  RESULTED_LAB_TEST_KEY=LAB_TEST_KEY;

				OUTPUT LABTEST_RESULT;

				 END;

				RUN;


				*/

				/*
				proc datasets memtype=DATA;

				   delete LABTEST_LABTESTRESULT;

				quit;

				DATA  LABTEST_ORDER;


				SET  LABTEST_ORDER;

				   IF LDF_GROUP_KEY=1 THEN LDF_GROUP_KEY='';

				 IF MORB_RPT_KEY=1 THEN MORB_RPT_KEY='';

				RUN;

				*/

				update rdb..TMP_LABTEST_ORDER
				SET LDF_GROUP_KEY=null
				where  LDF_GROUP_KEY=1 ;



				update rdb..TMP_LABTEST_ORDER
				SET MORB_RPT_KEY= null
				where  MORB_RPT_KEY=1 ;






				--CREATE TABLE DELETEDMORBS AS

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_DELETEDMORBS';

			create index idx_TMP_LABTEST_ORDER_key on   rdb..TMP_LABTEST_ORDER(MORB_RPT_KEY);



		IF OBJECT_ID('rdb.dbo.tmp_DELETEDMORBS', 'U') IS NOT NULL
				 drop table  rdb..tmp_DELETEDMORBS
				;


				SELECT mr.MORB_RPT_KEY, ORDERED_TEST_UID
				into rdb..tmp_DELETEDMORBS
				FROM RDB..MORBIDITY_REPORT mr,
				 rdb..TMP_LABTEST_ORDER  tlo
				   WHERE mr.RECORD_STATUS_CD='INACTIVE'
				   AND mr.MORB_RPT_KEY=tlo.MORB_RPT_KEY
				 ;


				DELETE FROM rdb..tmp_LABTEST_RESULT
				   WHERE ROOT_ORDERED_TEST_PNTR IN (SELECT ORDERED_TEST_UID FROM rdb..tmp_DELETEDMORBS)
				   ;


				DELETE FROM rdb..tmp_LABTEST_ORDER
					 WHERE MORB_RPT_KEY IN (SELECT  MORB_RPT_KEY FROM rdb..tmp_DELETEDMORBS);



				/*

				create table LAB_RESULT_VAL as

				select *
				from RDB..LAB_RESULT_VAL
				where
				 RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
				 and  RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL);


				QUIT;



				/*CONCATENATE RESULT TEXT AND NUMERIC UNITS*/
				DATA LAB_RESULT_VALMODIFIED (KEEP=TEST_RESULT_GRP_KEY RESULT TEST_RESULT_VAL_CD TEST_RESULT_VAL_CD_SYS_NM
				LOCAL_RESULT_CODE LOCAL_RESULT_NAME RESULT_REF_RANGE_FRM RESULT_REF_RANGE_TO RESULTEDTEST_VAL_CD RESULTEDTEST_VAL_CD_DESC
				LAB_RESULT_TXT_VAL NUMERIC_RESULT_WITHUNITS);


				*/




				/*
				SET LAB_RESULT_VAL;


				NUMERIC_RESULT_WITHUNITS=TRIM(NUMERIC_RESULT)||' '||TRIM(RESULT_UNITS);


				RESULT=TRANWRD(TRANWRD(LEFT(TRIM(TEST_RESULT_VAL_CD_DESC)||' '||TRIM(LAB_RESULT_TXT_VAL)||' '||TRIM(NUMERIC_RESULT)||' '||
				TRIM(RESULT_UNITS)),'0D'X,","),'0A'X," ");

  *DELETE CARRIAGE RETURNS - HEX SYMBOLS;


				LOCAL_RESULT_CODE=ALT_RESULT_VAL_CD;


				LOCAL_RESULT_NAME=ALT_RESULT_VAL_CD_DESC;

				RESULT_REF_RANGE_FRM=REF_RANGE_FRM;

				RESULT_REF_RANGE_TO=REF_RANGE_TO;

				RESULTEDTEST_VAL_CD=TEST_RESULT_VAL_CD;

				RESULTEDTEST_VAL_CD_DESC=TEST_RESULT_VAL_CD_DESC;

				RUN;


				PROC SORT DATA=LAB_RESULT_VALMODIFIED;
 BY TEST_RESULT_GRP_KEY;
 RUN;

				PROC SORT DATA=LABTEST_RESULT;
 BY TEST_RESULT_GRP_KEY;
 RUN;

				*/


						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;



		 if @Table_RowCount_no > 0
		   BEGIN

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_RESULT_VALMODIFIED';


		     IF OBJECT_ID('rdb.dbo.tmp_LAB_RESULT_VALMODIFIED', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_RESULT_VALMODIFIED;



				select TEST_RESULT_GRP_KEY as TEST_RESULT_GRP_KEY_VAL,
				 replace (replace (ltrim(rTRIM(TEST_RESULT_VAL_CD_DESC) + ' ' + RTRIM(LAB_RESULT_TXT_VAL) + ' ' + RTRIM(NUMERIC_RESULT) + ' ' +
				RTRIM(RESULT_UNITS)),char(13),','),char(10),' ') as RESULT ,
				TEST_RESULT_VAL_CD , TEST_RESULT_VAL_CD_SYS_NM ,
				ALT_RESULT_VAL_CD      as LOCAL_RESULT_CODE ,
				ALT_RESULT_VAL_CD_DESC as LOCAL_RESULT_NAME ,
				REF_RANGE_FRM          as RESULT_REF_RANGE_FRM ,
				REF_RANGE_TO as RESULT_REF_RANGE_TO ,
				TEST_RESULT_VAL_CD as RESULTEDTEST_VAL_CD ,
				TEST_RESULT_VAL_CD_DESC as RESULTEDTEST_VAL_CD_DESC ,
				(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(lab_result_txt_val,
										  '&#x09;', CHAR(9)),
										  '&#x0A;', CHAR(10)),
										  '&#x0D;', CHAR(13)),
										  '&#x20;', CHAR(32)),
										  '&amp;', CHAR(38)),
										  '&lt;', CHAR(60)),
										  '&gt;', CHAR(62))) as LAB_RESULT_TXT_VAL ,
				RTRIM(NUMERIC_RESULT)+coalesce(' '+RTRIM(RESULT_UNITS),'') as NUMERIC_RESULT_WITHUNITS
				into rdb..tmp_LAB_RESULT_VALMODIFIED
				from rdb..TMP_LAB_RESULT_VAL
				--vs where RDB_LAST_REFRESH_TIME  >= @batch_start_time	AND PERSON.LAST_CHG_TIME <  @batch_end_time  --vs
				;



				/*
				DATA LABTEST_RESULTS_VAL(DROP=TEST_RESULT_GRP_KEY LAB_RPT_STATUS ) ;

				MERGE LABTEST_RESULT (IN=INR) LAB_RESULT_VALMODIFIED;
   --VS
				BY TEST_RESULT_GRP_KEY;

				IF INR;

				RUN;

				*/

			 SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;
		   END;


		 if @Table_RowCount_no = 0
		   BEGIN

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING ENTIRE tmp_LAB_RESULT_VALMODIFIED';


		     IF OBJECT_ID('rdb.dbo.tmp_LAB_RESULT_VALMODIFIED', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_RESULT_VALMODIFIED;



				select TEST_RESULT_GRP_KEY as TEST_RESULT_GRP_KEY_VAL,
				 replace (replace (ltrim(rTRIM(TEST_RESULT_VAL_CD_DESC) + ' ' + RTRIM(LAB_RESULT_TXT_VAL) + ' ' + RTRIM(NUMERIC_RESULT) + ' ' +
				RTRIM(RESULT_UNITS)),char(13),','),char(10),' ') as RESULT ,
				TEST_RESULT_VAL_CD , TEST_RESULT_VAL_CD_SYS_NM ,
				ALT_RESULT_VAL_CD      as LOCAL_RESULT_CODE ,
				ALT_RESULT_VAL_CD_DESC as LOCAL_RESULT_NAME ,
				REF_RANGE_FRM          as RESULT_REF_RANGE_FRM ,
				REF_RANGE_TO as RESULT_REF_RANGE_TO ,
				TEST_RESULT_VAL_CD as RESULTEDTEST_VAL_CD ,
				TEST_RESULT_VAL_CD_DESC as RESULTEDTEST_VAL_CD_DESC ,
				LAB_RESULT_TXT_VAL ,
				RTRIM(NUMERIC_RESULT)+coalesce(' '+RTRIM(RESULT_UNITS),'') as NUMERIC_RESULT_WITHUNITS
				into rdb..tmp_LAB_RESULT_VALMODIFIED
				from rdb..LAB_RESULT_VAL
				--vs where RDB_LAST_REFRESH_TIME  >= @batch_start_time	AND PERSON.LAST_CHG_TIME <  @batch_end_time  --vs
				;


			 SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;
		   END;



			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LABTEST_RESULTS_VAL';


        		IF OBJECT_ID('rdb.dbo.tmp_LABTEST_RESULTS_VAL', 'U') IS NOT NULL
				 drop table rdb.dbo.tmp_LABTEST_RESULTS_VAL;


				select  ltr.*,ltrv.*
					into  rdb.dbo.tmp_LABTEST_RESULTS_VAL
					from  rdb.dbo.TMP_LABTEST_RESULT ltr
					 left outer join  RDB.dbo.TMP_LAB_RESULT_VALMODIFIED  ltrv on ltr.TEST_RESULT_GRP_KEY = ltrv.TEST_RESULT_GRP_KEY_VAL
						;


					alter table rdb.dbo.tmp_LABTEST_RESULTS_VAL drop column TEST_RESULT_GRP_KEY_VAL;




				/*

				proc datasets memtype=DATA;

				   delete LAB_RESULT_VALMODIFIED LABTEST_RESULT;

				quit;


				*/




				/*
				/*GET RESULT COMMENTS*/
				PROC SQL;

				create table LAB_RESULT_COMMENT as select * from RDB..LAB_RESULT_COMMENT where
				RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
				and  RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL) ORDER BY RESULT_COMMENT_GRP_KEY;

				QUIT;

				*/


						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;


		 if @Table_RowCount_no > 0
		  BEGIN
			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_RESULT_COMMENT';


		    IF OBJECT_ID('rdb.dbo.tmp_LAB_RESULT_COMMENT', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_RESULT_COMMENT;


				select LAB_TEST_UID
					,LAB_RESULT_COMMENT_KEY
					, substring(LAB_RESULT_COMMENTS ,1,2000) as [LAB_RESULT_COMMENTS]
					,RESULT_COMMENT_GRP_KEY
					, substring(RECORD_STATUS_CD ,1,8) as [RECORD_STATUS_CD]
					,[RDB_LAST_REFRESH_TIME]
				into rdb..tmp_LAB_RESULT_COMMENT
				from rdb..[TMP_New_Lab_Result_Comment_FINAL]
				--vs where RDB_LAST_REFRESH_TIME  >= @batch_start_time	AND PERSON.LAST_CHG_TIME <  @batch_end_time  --vs
				;



				/*

				/*PROC SORT DATA=LAB_RESULT_COMMENT OUT=LAB_RESULT_COMMENT (DROP=RECORD_STATUS_CD);
 BY RESULT_COMMENT_GRP_KEY;
 RUN;
*/

				PROC SORT DATA=LABTEST_RESULTS_VAL;
 BY RESULT_COMMENT_GRP_KEY;
 RUN;


				DATA LABTEST_RESULTS_VAL_COMMENT (DROP=RESULT_COMMENT_GRP_KEY LAB_RPT_DT_KEY LAB_RESULT_COMMENTS LAB_TEST_DT);



				MERGE LABTEST_RESULTS_VAL (IN=INV) LAB_RESULT_COMMENT(KEEP=RESULT_COMMENT_GRP_KEY LAB_RESULT_COMMENTS) ;

				BY RESULT_COMMENT_GRP_KEY;

				IF INV;


				length RESULT_COMMENTS $2000;

				RESULT_COMMENTS=TRANWRD(TRANWRD(LAB_RESULT_COMMENTS,'0D'X,","),'0A'X," ");
 *DELETE CARRIAGE RETURNS - HEX SYMBOLS;


				*/


		    SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;
		 END;


		 if @Table_RowCount_no = 0
		  BEGIN
			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING ENTIRE tmp_LAB_RESULT_COMMENT';


		    IF OBJECT_ID('rdb.dbo.tmp_LAB_RESULT_COMMENT', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_RESULT_COMMENT;


				select LAB_TEST_UID
					,LAB_RESULT_COMMENT_KEY
					, substring(LAB_RESULT_COMMENTS ,1,2000) as [LAB_RESULT_COMMENTS]
					,RESULT_COMMENT_GRP_KEY
					, substring(RECORD_STATUS_CD ,1,8) as [RECORD_STATUS_CD]
					,[RDB_LAST_REFRESH_TIME]
				into rdb..tmp_LAB_RESULT_COMMENT
				from rdb..[Lab_Result_Comment]
				--vs where RDB_LAST_REFRESH_TIME  >= @batch_start_time	AND PERSON.LAST_CHG_TIME <  @batch_end_time  --vs
				;

		    SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;
		 END;




			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LABTEST_RESULTS_VAL_COMMENT';


		IF OBJECT_ID('rdb.dbo.tmp_LABTEST_RESULTS_VAL_COMMENT', 'U') IS NOT NULL
				 drop table rdb..tmp_LABTEST_RESULTS_VAL_COMMENT;



				select lrv.*, tlrc.LAB_RESULT_COMMENTS
				into  rdb..tmp_LABTEST_RESULTS_VAL_COMMENT
				from rdb..tmp_LABTEST_RESULTS_VAL lrv
				left outer join rdb..tmp_LAB_RESULT_COMMENT tlrc on tlrc.RESULT_COMMENT_GRP_KEY = lrv.RESULT_COMMENT_GRP_KEY
				;


				alter table rdb..tmp_LABTEST_RESULTS_VAL_COMMENT
				  DROP column RESULT_COMMENT_GRP_KEY, LAB_RPT_DT_KEY
				  ;







						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LABTEST_RESULTS_VAL1';


		IF OBJECT_ID('rdb.dbo.tmp_LABTEST_RESULTS_VAL1', 'U') IS NOT NULL
				 drop table rdb..tmp_LABTEST_RESULTS_VAL1;



				select lrv.*,
				  lrc.lab_result_comments,
				  cast ( null as varchar(30)) as RESULT_COMMENTS,
				  cast ( null as varchar(2000)) as LAB_REPORT_DATE,
				  cast ( null as datetime) as LAB_TEST_DATE
				into rdb..tmp_LABTEST_RESULTS_VAL1
				from rdb..tmp_LABTEST_RESULTS_VAL lrv
				left outer join  rdb..tmp_LAB_RESULT_COMMENT lrc on lrc.RESULT_COMMENT_GRP_KEY = lrv.RESULT_COMMENT_GRP_KEY
				;



				update rdb..TMP_LABTEST_RESULTS_VAL1
				set RESULT_COMMENTS = rtrim(replace (replace (ltrim(RESULT_COMMENTS),char(13),','),char(10),' '))
				;


				/*


				IF LAB_TEST_DT <> . THEN
				 DO;

				  LAB_REPORT_DATE=LAB_TEST_DT;

				  LAB_TEST_DATE=LAB_TEST_DT;

				 END;

				FORMAT LAB_REPORT_DATE LAB_TEST_DATE DATETIME13.;

				RUN;

				*/

				update rdb..TMP_LABTEST_RESULTS_VAL1
				set  LAB_REPORT_DATE=format (LAB_TEST_DT, 'ddMMMyy:hh:mm'),
					 LAB_TEST_DATE=LAB_TEST_DT
				where LAB_TEST_DT is not null
				;



				/*

				DATA NEDSS_USERS;

				SET RDB..USER_PROFILE;

				LENGTH UID_FN $1;

				UID_FN=FIRST_NM;

				UID_LN=SCAN(LAST_NM,1,' ');

				UID_LN2=COMPRESS(UID_LN,',');

				UID=TRIM(UID_FN)||' '||TRIM(UID_LN2);

				*/


				/*
				IF UID='N ELR' THEN UID='NEDSS_ELR';

				RUN;

				*/


				/*
				PROC SORT DATA=LABTEST_RESULTS_VAL_COMMENT;
 BY LAB_RPT_CREATED_BY;
 RUN;

				PROC SORT DATA=NEDSS_USERS;
  BY NEDSS_ENTRY_ID;
 RUN;

				DATA LABTEST_CREATED (DROP=LAB_RPT_CREATED_BY FIRST_NM LAST_NM UID );


				MERGE LABTEST_RESULTS_VAL_COMMENT (IN=INR) NEDSS_USERS (KEEP=NEDSS_ENTRY_ID FIRST_NM LAST_NM UID
				RENAME=(NEDSS_ENTRY_ID=LAB_RPT_CREATED_BY));

				IF INR;

				BY LAB_RPT_CREATED_BY;


				LAB_REPORT_CREATED_BY=TRIM(FIRST_NM)||','||TRIM(LAST_NM);

				LAB_REPORT_CREATED_BY_UID=UID;

				RUN;



				PROC SORT DATA=LABTEST_CREATED;
 BY LAB_RPT_LAST_UPDATE_BY;
 RUN;

				PROC SORT DATA=NEDSS_USERS;
  BY NEDSS_ENTRY_ID;
 RUN;

				DATA LABTEST_UPDATED (DROP=LAB_RPT_LAST_UPDATE_BY FIRST_NM LAST_NM UID );


				MERGE LABTEST_CREATED (IN=INR) NEDSS_USERS (KEEP=NEDSS_ENTRY_ID FIRST_NM LAST_NM UID
				RENAME=(NEDSS_ENTRY_ID=LAB_RPT_LAST_UPDATE_BY));
 *NEDSS_ENTRY_ID CHANGED TO CREATED_BY IN LAST STEP;




				IF INR;

				BY LAB_RPT_LAST_UPDATE_BY;

				LAB_REPORT_LAST_UPDATED_BY=TRIM(FIRST_NM)||','||TRIM(LAST_NM);

				LAB_REPORT_LAST_UPDATED_BY_UID=UID;

				RUN;

				proc datasets memtype=DATA;

				   delete LABTEST_CREATED NEDSS_USERS;

				quit;

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING TMP_LABTEST_RESULTS_VAL_COMMENT1';


		IF OBJECT_ID('RDB.DBO.TMP_LABTEST_RESULTS_VAL_COMMENT1', 'U') IS NOT NULL
				 DROP TABLE  RDB..TMP_LABTEST_RESULTS_VAL_COMMENT1
				;


				select lrvc.* ,
				up.FIRST_NM,
				 up.LAST_NM,
				cast (RTRIM(UP.FIRST_NM)+','+RTRIM(UP.LAST_NM)  as varchar(150)) as LAB_REPORT_CREATED_BY,
				 CAST(RTRIM(coalesce(UP.FIRST_NM,'')+' ')+RTRIM(up.LAST_NM) AS varchar(150)) as LAB_REPORT_CREATED_BY_UID
				INTO RDB..TMP_LABTEST_RESULTS_VAL_COMMENT1
				from rdb..tmp_LABTEST_RESULTS_VAL_COMMENT lrvc
				left outer join nbs_odse..user_profile up on up.[NEDSS_ENTRY_ID] = lrvc.LAB_RPT_CREATED_BY
				;



						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING TMP_LABTEST_UPDATED';


		IF OBJECT_ID('rdb.dbo.TMP_LABTEST_UPDATED', 'U') IS NOT NULL
				 drop table  RDB..TMP_LABTEST_UPDATED
				;

				select lrvc1.*,PARENT_TEST_PNTR as ORDERED_TEST_UID,
				 cast (RTRIM(UP.FIRST_NM)+','+RTRIM(UP.LAST_NM)  as varchar(150)) as LAB_REPORT_LAST_UPDATED_BY,
				 CAST(RTRIM(coalesce(UP.FIRST_NM,'')+' ')+RTRIM(up.LAST_NM) AS varchar(150)) as LAB_REPORT_LAST_UPDATED_BY_UID
				INTO RDB..TMP_LABTEST_UPDATED
				from RDB..TMP_LABTEST_RESULTS_VAL_COMMENT1 lrvc1
				left outer join nbs_odse..user_profile up on up.[NEDSS_ENTRY_ID] = lrvc1.LAB_RPT_LAST_UPDATE_BY
				;



				alter table  RDB..TMP_LABTEST_UPDATED
				DROP column LAB_RPT_LAST_UPDATE_BY, FIRST_NM, LAST_NM, LAB_REPORT_CREATED_BY_UID
				;



				update RDB..TMP_LABTEST_RESULTS_VAL_COMMENT1
				set LAB_REPORT_CREATED_BY_UID='NEDSS_ELR'
				where  LAB_REPORT_CREATED_BY_UID='N ELR'
				;


				update RDB..TMP_LABTEST_UPDATED
				set LAB_REPORT_LAST_UPDATED_BY_UID='NEDSS_ELR'
				where  LAB_REPORT_LAST_UPDATED_BY_UID='N ELR'
				;





				/*


				/* JOIN WITH PERSON TABLE */
				PROC SQL;

				CREATE TABLE LABTEST_ORDER1 AS
				SELECT A.*, PATIENT_UID,PATIENT_FIRST_NAME,PATIENT_MIDDLE_NAME,PATIENT_LAST_NAME,PATIENT_LOCAL_ID, PATIENT_DOB, PATIENT_CURRENT_SEX,
				PATIENT_STREET_ADDRESS_1,PATIENT_STREET_ADDRESS_2,PATIENT_CITY ,PATIENT_STATE,PATIENT_ZIP ,PATIENT_COUNTY,PATIENT_COUNTRY,
				PATIENT_AGE_REPORTED,PATIENT_AGE_REPORTED_UNIT FROM
				LABTEST_ORDER A LEFT OUTER JOIN RDB..D_LAB100
				ON A.PATIENT_KEY=D_LAB100.PATIENT_KEY;

				QUIT;


				DATA LABTEST_ORDER1 ;

				SET LABTEST_ORDER1;

				LENGTH PATIENT_ADDRESS $725;


				AGE_REPORTED=PATIENT_AGE_REPORTED;

				PATIENT_REPORTED_AGE_UNITS=PATIENT_AGE_REPORTED_UNIT;


				PERSON_FIRST_NM=PATIENT_FIRST_NAME;

				PERSON_MIDDLE_NM=PATIENT_MIDDLE_NAME;

				PERSON_LAST_NM=PATIENT_LAST_NAME;

				PERSON_LOCAL_ID=PATIENT_LOCAL_ID;

				PERSON_DOB=PATIENT_DOB;

				PERSON_CURR_GENDER=PATIENT_CURRENT_SEX;

				PATIENT_ZIP_CODE=PATIENT_ZIP;



				PATIENT_ADDRESS=TRIM(PATIENT_STREET_ADDRESS_1);

				IF LENGTHN(TRIM(PATIENT_STREET_ADDRESS_2))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_STREET_ADDRESS_2);

				IF LENGTHN(TRIM(PATIENT_CITY))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_CITY);

				IF LENGTHN(TRIM(PATIENT_COUNTY))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_COUNTY);

				IF LENGTHN(TRIM(PATIENT_ZIP))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_ZIP);

				IF LENGTHN(TRIM(PATIENT_STATE))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_STATE);


				PATIENT_CITY=PROPCASE(PATIENT_CITY);


				PATIENT_UID=PERSON_UID;

				X = LENGTHN(TRIM(PATIENT_ADDRESS));

				IF X>0 THEN ADDR_USE_CD_DESC= 'HOME';

				ELSE  ADDR_USE_CD_DESC= '';

				IF X>0 THEN ADDR_CD_DESC='HOUSE';

				ELSE ADDR_CD_DESC='';

				*/

				--CREATE TABLE LABTEST_ORDER1 AS


						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LABTEST_ORDER1';


		IF OBJECT_ID('rdb.dbo.tmp_LABTEST_ORDER1', 'U') IS NOT NULL
				 drop table rdb..tmp_LABTEST_ORDER1
				;



				SELECT distinct LTO.*,
				PATIENT_UID,
				  PATIENT_FIRST_NAME as PERSON_FIRST_NM,
				  PATIENT_MIDDLE_NAME as PERSON_MIDDLE_NM,
				  PATIENT_LAST_NAME as PERSON_LAST_NM,
				  PATIENT_LOCAL_ID as PERSON_LOCAL_ID,
				  PATIENT_DOB as PERSON_DOB,
				  PATIENT_CURRENT_SEX  as PERSON_CURR_GENDER,
				  CAST ( (
					coalesce(RTRIM(PATIENT_STREET_ADDRESS_1),'')
					+coalesce(','+RTRIM( PATIENT_STREET_ADDRESS_2),'')
					+coalesce(','+upper(RTRIM( PATIENT_CITY)),'')
					+coalesce(','+RTRIM( PATIENT_COUNTY ),'')
					+coalesce(','+RTRIM( PATIENT_ZIP),'')
					+coalesce(','+RTRIM( PATIENT_STATE ),'')
				  )	as varchar(725) ) as PATIENT_ADDRESS,
				  PATIENT_STREET_ADDRESS_2,
				  rtrim(PATIENT_CITY) as PATIENT_CITY ,
				  PATIENT_STATE,
				  PATIENT_ZIP as PATIENT_ZIP_CODE,
				  PATIENT_COUNTY,
				  PATIENT_COUNTRY,
				  PATIENT_AGE_REPORTED as AGE_REPORTED,
				  PATIENT_AGE_REPORTED_UNIT as PATIENT_REPORTED_AGE_UNITS,
				  cast ( '' as varchar(10)) as ADDR_USE_CD_DESC,
				  cast ( '' as varchar(10)) as ADDR_CD_DESC

				 into rdb..tmp_LABTEST_ORDER1
				FROM rdb..tmp_LABTEST_ORDER LTO
					 LEFT OUTER JOIN RDB..D_PATIENT PAT ON LTO.PATIENT_KEY=PAT.PATIENT_KEY
					;


					update  rdb..tmp_LABTEST_ORDER1
					set  ADDR_USE_CD_DESC= 'HOME',
						 ADDR_CD_DESC='HOUSE'
					where PATIENT_ADDRESS is not null and rtrim(PATIENT_ADDRESS) != ''
					;




				/*

				/*DROP AGE_REPORTED PATIENT_FIRST_NAME PATIENT_MIDDLE_NAME PATIENT_LAST_NAME PATIENT_LOCAL_ID PATIENT_DOB PATIENT_CURRENT_SEX;
*/
				RUN;

				/***TODO DO UPTO THIS POINT */
				--VS

				DATA PROGRAM_AREA_CODE (KEEP=PROGRAM_AREA_CODE PROGRAM_AREA_DESC PROGRAM_AREA_ID);

				SET NBS_SRT.PROGRAM_AREA_CODE;

				PROGRAM_AREA_CODE=PROG_AREA_CD;

				PROGRAM_AREA_DESC=PROG_AREA_DESC_TXT;

				PROGRAM_AREA_ID=PUT(NBS_UID,Z5.);

				RUN;



				DATA LAB_RESULTS_ORDER_CONTACT1;

				SET LABTEST_UPDATED ;

				PROGRAM_AREA_ID=SUBSTR(PUT(OID,11.),7,5);

				RUN;

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_RESULTS_ORDER_CONTACT1';


		IF OBJECT_ID('rdb.dbo.tmp_LAB_RESULTS_ORDER_CONTACT1', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_RESULTS_ORDER_CONTACT1;



				select * , substring(left( oid+ space(11), 11),7,5) as PROGRAM_AREA_ID  --VS =SUBSTR(PUT(OID,11.),7,5)
				into rdb..tmp_LAB_RESULTS_ORDER_CONTACT1
				from rdb..TMP_LABTEST_UPDATED
				;


				/*
				--VS
				PROC SORT DATA=LAB_RESULTS_ORDER_CONTACT1;
 BY PROGRAM_AREA_ID;
 RUN;


				PROC SORT DATA=PROGRAM_AREA_CODE;
 BY PROGRAM_AREA_ID;
 RUN;



				DATA LAB_RESULTS_ORDER_CONTACT2 (DROP=PROGRAM_AREA_ID OID PATIENT_UID);


				MERGE LAB_RESULTS_ORDER_CONTACT1 (IN=INL) PROGRAM_AREA_CODE;

				BY PROGRAM_AREA_ID;

				IF INL;

				RUN;

				*/


						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_RESULTS_ORDER_CONTACT2';


		IF OBJECT_ID('rdb.dbo.tmp_LAB_RESULTS_ORDER_CONTACT2', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_RESULTS_ORDER_CONTACT2;



				select *
				into rdb..tmp_LAB_RESULTS_ORDER_CONTACT2
				from rdb..tmp_LAB_RESULTS_ORDER_CONTACT1 tlroc1
				left outer join NBS_SRTE..PROGRAM_AREA_CODE pac on left( pac.NBS_UID+ space(5), 5)  = cast(tlroc1.PROGRAM_AREA_ID as int)




				/*



				proc datasets memtype=DATA;

				   delete LABTEST_ORDER LAB_RESULTS_ORDER_CONTACT1;

				quit;



				DATA PERSON_ORDER_PROVIDER;

				SET PERSON_ORDER_PROVIDER;

				LENGTH PROVIDER_ADDRESS $725;


				PROVIDER_ADDRESS=TRIM(PROVIDER_STREET_ADDRESS_1);

				IF LENGTHN(TRIM(PROVIDER_STREET_ADDRESS_2))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_STREET_ADDRESS_2);

				IF LENGTHN(TRIM(PROVIDER_CITY))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_CITY);

				IF LENGTHN(TRIM(PROVIDER_COUNTY))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_COUNTY);

				IF LENGTHN(TRIM(PROVIDER_ZIP))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_ZIP);

				IF LENGTHN(TRIM(PROVIDER_STATE))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_STATE);

				PROVIDER_CITY=PROPCASE(PROVIDER_CITY);




				ORDERING_PROVIDER_NM=PROPCASE(TRIM(PROVIDER_LAST_NAME))||', '||PROPCASE(TRIM(PROVIDER_FIRST_NAME))||' '||PROPCASE(TRIM(PROVIDER_MIDDLE_NAME));




				LENGTHP=LENGTHN(TRIM(PROVIDER_ADDRESS));

				IF 	LENGTHP > 0 THEN PRV_ADDR_USE_CD_DESC='PRIMARY WORK PLACE';

				IF 	LENGTHP > 0 THEN PRV_ADDR_CD_DESC='OFFICE';

				PROVIDER_PHONE=PROVIDER_PHONE_WORK;

				RUN;


				*/


				/*PROVIDER INFORMATION IS ON ORDERED TESTS - JOIN WITH ORDERED TESTS TABLE*/

				--CREATE TABLE PERSON_ORDER_PROVIDER AS


						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_PERSON_ORDER_PROVIDER';


		IF OBJECT_ID('rdb.dbo.tmp_PERSON_ORDER_PROVIDER', 'U') IS NOT NULL
				 drop table rdb..tmp_PERSON_ORDER_PROVIDER;


				SELECT  LABORDER.*,
						PROVIDER_PHONE_WORK as PROVIDER_PHONE,
						PROVIDER_FIRST_NAME, PROVIDER_MIDDLE_NAME, PROVIDER_LAST_NAME,
						coalesce((RTRIM(PROVIDER_LAST_NAME)),'')+', '+coalesce((RTRIM(PROVIDER_FIRST_NAME)),'')+coalesce(' '+(RTRIM(PROVIDER_MIDDLE_NAME))  ,'')
						  as ORDERING_PROVIDER_NM,
						PROVIDER_STREET_ADDRESS_1,PROVIDER_STREET_ADDRESS_2,
						upper(PROVIDER_CITY) as PROVIDER_CITY,
						PROVIDER_STATE,PROVIDER_ZIP ,
						PROVIDER_COUNTY,PROVIDER_COUNTRY,
						  CAST ( (
					coalesce(RTRIM(PROVIDER_STREET_ADDRESS_1),'')
					+coalesce(','+RTRIM( PROVIDER_STREET_ADDRESS_2),'')
					+coalesce(','+upper(RTRIM( PROVIDER_CITY)),'')
					+coalesce(','+RTRIM( PROVIDER_COUNTY ),'')
					+coalesce(','+RTRIM( PROVIDER_ZIP),'')
					+coalesce(','+RTRIM( PROVIDER_STATE ),'')
				  )	as varchar(725) ) as PROVIDER_ADDRESS,
				   cast ( '' as varchar(30)) as PRV_ADDR_USE_CD_DESC,
				  cast ( '' as varchar(30)) as PRV_ADDR_CD_DESC

				into rdb..tmp_PERSON_ORDER_PROVIDER
				FROM RDB..D_PROVIDER P,
					  rdb..tmp_LABTEST_ORDER1 LABORDER
					 WHERE LABORDER.ORDERING_PROVIDER_KEY= P.PROVIDER_KEY
					 ;



					update  rdb..tmp_PERSON_ORDER_PROVIDER
					set  PRV_ADDR_USE_CD_DESC='PRIMARY WORK PLACE',
						 PRV_ADDR_CD_DESC='OFFICE'
					where PROVIDER_ADDRESS is not null and rtrim(PROVIDER_ADDRESS) != ''
					;



					update  rdb..tmp_PERSON_ORDER_PROVIDER
					set  PRV_ADDR_USE_CD_DESC=null
					where rtrim(PRV_ADDR_USE_CD_DESC) = ''
					;

	               update  rdb..tmp_PERSON_ORDER_PROVIDER
					set  PRV_ADDR_CD_DESC=null
					where rtrim(PRV_ADDR_CD_DESC) = ''
					;






				--CREATE TABLE REPORTING_ORG AS

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_lab_REPORTING_ORG';


		IF OBJECT_ID('rdb.dbo.tmp_lab_REPORTING_ORG', 'U') IS NOT NULL
				 drop table  rdb..tmp_lab_REPORTING_ORG  ;



				SELECT REPORTING_LAB_KEY_ORDER as REPORTING_LAB_KEY_REPORTING
				into rdb..tmp_lab_REPORTING_ORG
				FROM rdb..tmp_PERSON_ORDER_PROVIDER;



				--CREATE TABLE ORDERING_ORG AS

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_ORDERING_ORG';


		IF OBJECT_ID('rdb.dbo.tmp_ORDERING_ORG', 'U') IS NOT NULL
				 drop table  rdb..tmp_ORDERING_ORG  ;



				SELECT ORDERING_ORG_KEY as ORDERING_ORG_KEY_ORDER
				into rdb..tmp_ORDERING_ORG
				FROM rdb..tmp_PERSON_ORDER_PROVIDER;




			--CREATE TABLE LAB_ENTITY1 AS
		     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_ENTITY1';


		IF OBJECT_ID('rdb.dbo.tmp_LAB_ENTITY1', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_ENTITY1;


				SELECT  distinct  A.*,
						REPORTING_LAB.ORGANIZATION_NAME AS  'REPORTING_FACILITY',
						REPORTING_LAB.ORGANIZATION_FACILITY_ID AS  'REPORTING_FACILITY_CLIA_NBR',
						REPORTING_LAB.ORGANIZATION_LOCAL_ID AS  'REPORTING_FACILITY_ID',
						REPORTING_LAB.ORGANIZATION_UID AS  'REPORTING_FACILITY_UID',
						REPORTING_LAB.ORGANIZATION_PHONE_WORK AS  'REPORTING_FACILITY_PHONE_NBR'
				into rdb..tmp_LAB_ENTITY1
				FROM rdb..tmp_lab_REPORTING_ORG A ,
					 RDB..D_ORGANIZATION REPORTING_LAB
				WHERE REPORTING_LAB.ORGANIZATION_KEY=A.REPORTING_LAB_KEY_REPORTING;




				--CREATE TABLE LAB_ENTITY2 AS

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_ENTITY2';


			CREATE NONCLUSTERED INDEX [idx_tmp_lab_e1_rpt_lab] ON rdb.dbo.[tmp_LAB_ENTITY1]
				(
					[REPORTING_LAB_KEY_REPORTING] ASC
				);

				CREATE NONCLUSTERED INDEX [idx_tmp_person_prv_rpt_lab] ON rdb.dbo.tmp_PERSON_ORDER_PROVIDER
				(
					REPORTING_LAB_KEY_ORDER ASC
				);





		IF OBJECT_ID('rdb.dbo.tmp_LAB_ENTITY2', 'U') IS NOT NULL
				 drop table  rdb..tmp_LAB_ENTITY2;


				SELECT distinct A.*,
						ORDERING_ORG.ORGANIZATION_LOCAL_ID AS  'ORDERING_FACILITY_ID',
						ORDERING_ORG.ORGANIZATION_NAME AS  'ORDERING_FACILITY',
						ORDERING_ORG.ORGANIZATION_PHONE_WORK AS    'ORDERING_FACILITY_PHONE_NBR'
				into rdb..tmp_LAB_ENTITY2
				FROM rdb..tmp_ORDERING_ORG A ,
					 RDB..D_ORGANIZATION ORDERING_ORG
				WHERE ORDERING_ORG.ORGANIZATION_KEY=A.ORDERING_ORG_KEY_ORDER
				;





				/*
				proc datasets memtype=DATA;

				   delete REPORTING_ORG ORDERING_ORG;

				QUIT;



				PROC SORT DATA=PERSON_ORDER_PROVIDER;
 BY REPORTING_LAB_KEY;
 RUN;

				PROC SORT DATA=LAB_ENTITY1;
 BY REPORTING_LAB_KEY;
 RUN;

				*/

				/*

				DATA LAB_ORDER_ENTITY1;

				   MERGE LAB_ENTITY1 PERSON_ORDER_PROVIDER;

				   BY REPORTING_LAB_KEY;

				RUN;

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_ORDER_ENTITY1';


		IF OBJECT_ID('rdb.dbo.tmp_LAB_ORDER_ENTITY1', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_ORDER_ENTITY1;



				select  distinct le.*,pop.*
				into rdb..tmp_LAB_ORDER_ENTITY1
				from rdb..tmp_LAB_ENTITY1 le,
					 rdb..tmp_PERSON_ORDER_PROVIDER pop
				 where  le.REPORTING_LAB_KEY_REPORTING= pop.REPORTING_LAB_KEY_ORDER
				 ;



				/*

				proc datasets memtype=DATA;

				   delete PERSON_ORDER_PROVIDER LAB_ENTITY1;

				quit;


				PROC SORT DATA=LAB_ORDER_ENTITY1;
 BY ORDERING_ORG_KEY;
 RUN;

				PROC SORT DATA=LAB_ENTITY2;
 BY ORDERING_ORG_KEY;
 RUN;


				DATA LAB_ORDER_ENTITY;

				   MERGE LAB_ENTITY2 LAB_ORDER_ENTITY1;

				   BY ORDERING_ORG_KEY;

				RUN;


				*/

				--VS

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_ORDER_ENTITY_KEY';


		IF OBJECT_ID('rdb.dbo.tmp_LAB_ORDER_ENTITY_KEY', 'U') IS NOT NULL
				 drop table  rdb..tmp_LAB_ORDER_ENTITY_KEY;


				select ORDERING_ORG_KEY_ORDER
				into rdb..tmp_LAB_ORDER_ENTITY_KEY
				from rdb..tmp_LAB_ENTITY2
				union
				select ORDERING_ORG_KEY
				from rdb..tmp_LAB_ORDER_ENTITY1
				;



						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_ORDER_ENTITY11';


		IF OBJECT_ID('rdb.dbo.tmp_LAB_ORDER_ENTITY11', 'U') IS NOT NULL
				 drop table rdb..tmp_LAB_ORDER_ENTITY11
				;


				select distinct coalesce(e2.ORDERING_ORG_KEY_ORDER, e1.REPORTING_LAB_KEY_REPORTING) as ORDERING_ORG_KEY_MAIN,e2.*,e1.*,
				cast(null as varchar(2000)) as  INVESTIGATION_KEYS,
				cast(null as bigint) as  INV_KEY
				into rdb..tmp_LAB_ORDER_ENTITY11
				from rdb..tmp_LAB_ORDER_ENTITY_KEY loek
					 left outer join rdb..tmp_LAB_ENTITY2 e2 on e2.ORDERING_ORG_KEY_ORDER = loek.ORDERING_ORG_KEY_ORDER
					 left outer join rdb..tmp_LAB_ORDER_ENTITY1 e1 on e1.ORDERING_ORG_KEY = loek.ORDERING_ORG_KEY_ORDER
					 ;








				/*
				proc datasets memtype=DATA;

				   delete LAB_ENTITY2 LAB_ORDER_ENTITY1;

				quit;



				DATA LABTEST_UPDATED;

				SET LABTEST_UPDATED;

				ORDERED_TEST_UID=PARENT_TEST_PNTR;

				RUN;



				PROC SORT DATA= LABTEST_UPDATED;
 BY ORDERED_TEST_UID;
RUN;

				PROC SORT DATA= LAB_ORDER_ENTITY;
 BY LAB_TEST_KEY;
RUN;

				*/


				/*
				DATA LAB_ORDER_ENTITY;

				LENGTH INVESTIGATION_KEYS $2000;

				LENGTH INV_KEY 8;


				SET LAB_ORDER_ENTITY;
 BY LAB_TEST_KEY;

				RETAIN INVESTIGATION_KEYS;

				RETAIN INV_KEY;


				IF FIRST.LAB_TEST_KEY THEN INVESTIGATION_KEYS=' ';

				IF FIRST.LAB_TEST_KEY THEN INV_KEY=.;


				IF(INV_KEY <> INVESTIGATION_KEY) THEN INVESTIGATION_KEYS=CATX(', ',INVESTIGATION_KEYS,INVESTIGATION_KEY);


				INV_KEY=INVESTIGATION_KEY;

				IF LAST.LAB_TEST_KEY;




				RUN;

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_lab_order_entity11_invkeys';


		IF OBJECT_ID('rdb.dbo.tmp_lab_order_entity11_invkeys', 'U') IS NOT NULL
				 drop table  rdb..tmp_lab_order_entity11_invkeys
				;


				select
					tloe1.lab_test_key
					, stuff((
						select ', ' + cast(tloe2.investigation_key as varchar)
						from rdb..tmp_LAB_ORDER_ENTITY11  tloe2
						where tloe2.lab_test_key = tloe1.lab_test_key
						group by tloe2.investigation_key
						order by tloe2.investigation_key
						for xml path('')
					),1,2,'') as INVESTIGATION_KEYS
				into rdb..tmp_lab_order_entity11_invkeys
				from rdb..tmp_LAB_ORDER_ENTITY11  tloe1
				group by tloe1.lab_test_key
				;


						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LAB_ORDER_ENTITY';


		IF OBJECT_ID('rdb.dbo.tmp_LAB_ORDER_ENTITY', 'U') IS NOT NULL
				 drop table  [RDB].dbo.[tmp_LAB_ORDER_ENTITY]
				;


				SELECT distinct [ORDERING_ORG_KEY_MAIN]
					  ,[ORDERING_ORG_KEY_ORDER]
					  ,[ORDERING_FACILITY_ID]
					  ,[ORDERING_FACILITY]
					  ,[ORDERING_FACILITY_PHONE_NBR]
					  ,[REPORTING_LAB_KEY_REPORTING]
					  ,[REPORTING_FACILITY]
					  ,[REPORTING_FACILITY_CLIA_NBR]
					  ,[REPORTING_FACILITY_ID]
					  ,[REPORTING_FACILITY_UID]
					  ,[REPORTING_FACILITY_PHONE_NBR]
					  ,[LAB_TEST_STATUS]
					  ,loe11.[LAB_TEST_KEY] as LAB_TEST_KEY_OE
					  ,[LAB_RPT_LOCAL_ID] as LAB_RPT_LOCAL_ID_OE
					  ,[REASON_FOR_TEST_DESC]
					  ,[RECORD_STATUS_CD]
					  ,[ORDERED_RPT_UID]
					  ,[ORDERED_LAB_TEST_CD]
					  ,[ORDERED_LAB_TEST_CD_DESC]
					  ,[ORDERED_TEST_CODE]
					  ,[ORDERED_LABTEST_CD_SYS_NM]
					  ,[SPECIMEN_DETAILS]
					  ,[ORDERED_TEST_UID] as ORDERED_TEST_UID_OE
					  ,[SPECIMEN_ADD_TIME]
					  ,[SPECIMEN_LAST_CHANGE_TIME]
					  ,[ORDERING_ORG_KEY]
					  ,[REPORTING_LAB_KEY_ORDER]
					  ,[CONDITION_KEY]
					 -- ,[INVESTIGATION_KEY]
					  ,[ORDERING_PROVIDER_KEY]
					  ,[LAB_RPT_STATUS]
					  ,[OID] as oid_order
					  ,[CONDITION_CD]
					  ,[REASON_FOR_TEST_DESC1]
					  ,[SPECIMEN_SRC_CD]
					  ,[SPECIMEN_SRC_DESC]
					  ,[LDF_GROUP_KEY]
					  ,[MORB_RPT_KEY]
					  ,[PATIENT_KEY]
					  ,[DOCUMENT_LINK]
					  ,[ALT_LAB_TEST_CD_SYS_CD] as ALT_LAB_TEST_CD_SYS_CD_OE
					  ,[lab_test_type] as lab_test_type_oe
					  ,[PATIENT_UID]
					  ,[PERSON_FIRST_NM]
					  ,[PERSON_MIDDLE_NM]
					  ,[PERSON_LAST_NM]
					  ,[PERSON_LOCAL_ID]
					  ,[PERSON_DOB]
					  ,[PERSON_CURR_GENDER]
					  ,[PATIENT_ADDRESS]
					  ,[PATIENT_STREET_ADDRESS_2]
					  ,[PATIENT_CITY]
					  ,[PATIENT_STATE]
					  ,[PATIENT_ZIP_CODE]
					  ,[PATIENT_COUNTY]
					  ,[PATIENT_COUNTRY]
					  ,[AGE_REPORTED]
					  ,[PATIENT_REPORTED_AGE_UNITS]
					  ,[ADDR_USE_CD_DESC]
					  ,[ADDR_CD_DESC]
					  ,[PROVIDER_PHONE]
					  ,[PROVIDER_FIRST_NAME]
					  ,[PROVIDER_MIDDLE_NAME]
					  ,[PROVIDER_LAST_NAME]
					  ,[ORDERING_PROVIDER_NM]
					  ,[PROVIDER_STREET_ADDRESS_1]
					  ,[PROVIDER_STREET_ADDRESS_2]
					  ,[PROVIDER_CITY]
					  ,[PROVIDER_STATE]
					  ,[PROVIDER_ZIP]
					  ,[PROVIDER_COUNTY]
					  ,[PROVIDER_COUNTRY]
					  ,[PROVIDER_ADDRESS]
					  ,[PRV_ADDR_USE_CD_DESC]
					  ,[PRV_ADDR_CD_DESC]
					  ,loei.[INVESTIGATION_KEYS]
					  ,[INV_KEY]
				  into [RDB].dbo.[tmp_LAB_ORDER_ENTITY]
				  FROM [RDB].dbo.[tmp_LAB_ORDER_ENTITY11] loe11
				  left outer join rdb..tmp_lab_order_entity11_invkeys loei on loei.lab_test_key = loe11.lab_test_key
				  ;






				--CREATE TABLE LABTESTSINIT AS

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LABTESTSINIT';


		IF OBJECT_ID('rdb.dbo.tmp_LABTESTSINIT', 'U') IS NOT NULL
				 drop table rdb..tmp_LABTESTSINIT;


				SELECT *
				into rdb..tmp_LABTESTSINIT
				FROM  rdb..tmp_LAB_ORDER_ENTITY loe
				LEFT OUTER JOIN rdb..tmp_LABTEST_UPDATED loeu ON loe.ORDERED_TEST_UID_OE=loeu.ORDERED_TEST_UID
				;



				/*
				DATA LAB_RESULTS_ORDER_CONTACT2;

				SET LAB_RESULTS_ORDER_CONTACT2;

				ORDERED_TEST_UID=PARENT_TEST_PNTR;

				RUN;


				--VS
				PROC SORT DATA= LAB_RESULTS_ORDER_CONTACT2;
 BY RESULTED_TEST_UID;
RUN;

				PROC SORT DATA= LABTESTSINIT NODUPKEY;
 BY RESULTED_TEST_UID;
RUN;


				data LABTESTS;
  MERGE LABTESTSINIT      LAB_RESULTS_ORDER_CONTACT2;
  by RESULTED_TEST_UID;
run;


				PROC SORT DATA= LABTESTS;
 BY RESULTED_TEST_UID;
RUN;

				proc datasets memtype=DATA;

				   delete LABTESTSINIT LAB_RESULTS_ORDER_CONTACT2;

				quit;

				PROC SORT DATA= LABTESTS;
 BY  CONDITION_CD;
RUN;

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_labtests';


		IF OBJECT_ID('rdb.dbo.tmp_labtests', 'U') IS NOT NULL
				 drop table  rdb..tmp_labtests
				;




				SELECT li.*
				, lroc2.code_seq
				, lroc2.code_set_nm
				, lroc2.nbs_uid
				, lroc2.prog_area_cd
				, lroc2.prog_area_desc_txt
				, lroc2.PROGRAM_AREA_ID
				, lroc2.status_cd
				, lroc2.status_time
					  ,CONDITION_SHORT_NM
					  , cast ( null as varchar(50)) as LOINC
					  , cast ( null as varchar(50)) as  CONDITION
				  into rdb..tmp_labtests
				  FROM [RDB].dbo.[tmp_LABTESTSINIT] li
					   left outer join NBS_SRTE..CONDITION_CODE cc on cc.CONDITION_CD = li.CONDITION_CD
					   left outer join rdb..tmp_LAB_RESULTS_ORDER_CONTACT2  lroc2 on lroc2.RESULTED_TEST_UID = li.RESULTED_TEST_UID
					   ;


				/*
				/*FIRST GET THE CONDITION NAMES FOR THE CONDITION CODES THAT ARE PRESENT*/
				PROC SQL;

				CREATE TABLE CONDITION_CODE AS SELECT CONDITION_CD, CONDITION_SHORT_NM
				FROM NBS_SRT.CONDITION_CODE
				ORDER BY CONDITION_CD;

				QUIT;

				/*PROC SORT DATA=LABTESTS;
 BY CONDITION_CD;
 RUN;
*/
				PROC SORT DATA=CONDITION_CODE;
 BY CONDITION_CD;
 RUN;


				DATA LABTESTS1;

				LENGTH LOINC $20 CONDITION $50;

				MERGE LABTESTS (IN=INL) CONDITION_CODE;

				IF INL;

				BY CONDITION_CD;

				*/


				/*

				IF UPCASE(LAB_TEST_CD_SYS_NM)='LOINC' THEN
				 DO;

				  LOINC=LAB_TEST_CD;

				 END;

				RUN;

				*/

				update rdb..tmp_labtests
				set LOINC=ORDERED_LAB_TEST_CD
				where UPPER(LAB_TEST_CD_SYS_NM)='LOINC'
				;


				/*
				/*PROC FREQ DATA=LABTESTS1;
 *MISSING 16121 CONDITION NAMES, 18622 LOINC CODES;
*/
				/*TABLES LOINC;
*/
				/*RUN;
*/

				/*NOW MAP NON-LOINC CODES TO LOINC*/

				-- VS PROC SORT DATA=NBS_SRT.LABTEST_LOINC NODUPKEY OUT=LABTEST_LOINC  (KEEP=LAB_TEST_CD LOINC_CD);
 BY LAB_TEST_CD;
 RUN;


				PROC SORT DATA=LABTESTS1;
 BY LAB_TEST_CD;
 RUN;

				DATA LABTESTS2;

				MERGE LABTESTS1 (IN=INL) LABTEST_LOINC ;

				BY LAB_TEST_CD;

				*/


						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LABTESTS2';


		IF OBJECT_ID('rdb.dbo.tmp_LABTESTS2', 'U') IS NOT NULL
				 drop table  rdb..tmp_LABTESTS2
				;



				select tl.*,  LOINC_CD
				into rdb..tmp_LABTESTS2
				from rdb..tmp_labtests tl
				left outer join NBS_SRTE..LABTEST_LOINC ll  on ll.LAB_TEST_CD = tl.ORDERED_LAB_TEST_CD

				;



				/*
				IF INL;

				IF LOINC =' ' THEN
				 DO;

				  IF FIND(LAB_TEST_CD,'-',3)>0 THEN LOINC=LAB_TEST_CD;

				  ELSE DO;

				  LOINC=LOINC_CD;

				  END;

				 END;

				RUN;

				proc datasets memtype=DATA;

				   delete LABTESTS1;

				quit;

				*/


				update rdb..tmp_LABTESTS2
				set loinc = ORDERED_LAB_TEST_CD
				where ltrim(rtrim(loinc)) is null
				and charindex('-',ORDERED_LAB_TEST_CD) > 3
				;


				update rdb..tmp_LABTESTS2
				set  loinc = loinc_cd
				where ltrim(rtrim(loinc)) is null
				;


				/*



				/*PROC FREQ DATA=LABTESTS2;
  *MISSING 3090 LOINC CODES;
*/
				/*TABLES LOINC;
*/
				/*RUN;
*/

				/*CREATE A SPREADSHEET WITH MISSING LOINC MAP IN LABTEST_LOINC TABLE FROM SRT*/
				DATA MISSING_LOINC_MAP (KEEP=LAB_TEST_CD LOINC);

				SET LABTESTS2;

				BY LAB_TEST_CD;

				IF LOINC=' ';

				IF FIRST.LAB_TEST_CD;

				RUN;


				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_MISSING_LOINC_MAP';


		IF OBJECT_ID('rdb.dbo.tmp_MISSING_LOINC_MAP', 'U') IS NOT NULL
				 drop table rdb..tmp_MISSING_LOINC_MAP;



				select *
				into rdb..tmp_MISSING_LOINC_MAP
				from rdb..tmp_LABTESTS2
				where ltrim(rtrim(loinc)) is null
				;




				/*
				/*TAKE THE MAPPED LOINC CODES AND MAP TO CONDITION*/
				PROC SORT DATA=NBS_SRT.LOINC_CONDITION NODUPKEY OUT=LOINC_CONDITION (KEEP=LOINC_CD CONDITION_CD DISEASE_NM);
 BY LOINC_CD;
 RUN;

				PROC SORT DATA=LABTESTS2;
 BY LOINC;
 RUN;

				DATA LABTESTS3;

				MERGE LABTESTS2 (IN=IN2) LOINC_CONDITION (RENAME=(LOINC_CD=LOINC CONDITION_CD=CONDITION_CD_SRT));

				BY LOINC;

				IF IN2;

				IF CONDITION_SHORT_NM=' ' THEN
				 DO;

				  CONDITION_SHORT_NM=DISEASE_NM;

				  CONDITION_CD=CONDITION_CD_SRT;

				 END;

				LABEL LOINC= ' ';

				RUN;

				proc datasets memtype=DATA;

				   delete LABTESTS2;

				quit;


				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LABTESTS3';


		IF OBJECT_ID('RDB.DBO.tmp_LABTESTS3', 'U') IS NOT NULL
				 DROP TABLE  rdb..tmp_LABTESTS3 ;



				SELECT lt2.*,lc.condition_cd as CONDITION_CD_SRT,lc.disease_nm
				INTO rdb..tmp_LABTESTS3
				from rdb..tmp_LABTESTS2 lt2
				left outer join NBS_SRTE..LOINC_CONDITION lc on lc.loinc_cd = lt2.LOINC
				;


				update   rdb..tmp_LABTESTS3
				SET CONDITION_SHORT_NM=DISEASE_NM,
					CONDITION_CD=CONDITION_CD_SRT
				WHERE RTRIM(LTRIM(CONDITION_SHORT_NM))=''  OR RTRIM(LTRIM(CONDITION_SHORT_NM)) IS NULL
				;





				/*


				/*SNOMED_CONDITION TABLE NEEDED TO BE TWEAKED BEFORE USING - SOME CODES HAVE MULTIPLE CONDITION NAMES*/
				PROC SORT DATA=NBS_SRT.SNOMED_CONDITION NODUPKEY OUT=SNOMED_CONDITION (KEEP=SNOMED_CD CONDITION_CD DISEASE_NM);
 BY SNOMED_CD;
 RUN;



				DATA SNOMED_CONDITION1 (KEEP=TEST_RESULT_VAL_CD SNOMED_CONDITION_NM SNOMED_CONDITION_CD);

				LENGTH TEST_RESULT_VAL_CD $20;
  *PREPARE FOR MERGE;

				SET SNOMED_CONDITION;

				BY SNOMED_CD;

				TEST_RESULT_VAL_CD=SNOMED_CD;

				SNOMED_CONDITION_NM=DISEASE_NM;

				SNOMED_CONDITION_CD=CONDITION_CD;

				--VS  IF FIRST.SNOMED_CD;
  *GET RID OF A FEW DUPLICATE SNOMED CODES;

				RUN;


				PROC SORT DATA=SNOMED_CONDITION1;
  BY TEST_RESULT_VAL_CD;
 RUN;

				PROC SORT DATA=LABTESTS3;
 BY TEST_RESULT_VAL_CD;
 RUN;

				*/


				/*
				DATA LABTESTS4 (DROP=SNOMED_CONDITION_NM SNOMED_CONDITION_CD DISEASE_NM CONDITION_CD_SRT LOINC_CD
				TEST_RESULT_VAL_CD_SYS_NM TEST_RESULT_VAL_CD);

				MERGE LABTESTS3 (IN=INL) SNOMED_CONDITION1 ;

				BY TEST_RESULT_VAL_CD;

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_LABTESTS4';


		IF OBJECT_ID('rdb.dbo.tmp_LABTESTS4', 'U') IS NOT NULL
				 drop table  rdb..tmp_LABTESTS4
				;


				select lt3.*,
					   sc.DISEASE_NM as SNOMED_CONDITION_NM,
					   sc.CONDITION_CD as SNOMED_CONDITION_CD,
					   Cast (null as [varchar](1000) ) as SNOMED
				into rdb..tmp_LABTESTS4
				from rdb..tmp_LABTESTS3 lt3
				left outer join NBS_SRTE..SNOMED_CONDITION sc on sc.SNOMED_CD = lt3.TEST_RESULT_VAL_CD
				;


				/*


				IF INL;

				IF ANYALPHA(TEST_RESULT_VAL_CD)=1 AND SUBSTR(TEST_RESULT_VAL_CD,2,1)='-' THEN
				 DO;

				  SNOMED=TEST_RESULT_VAL_CD;


				  IF CONDITION = ' ' THEN
				   DO;

				  CONDITION=SNOMED_CONDITION_NM;

				   END;


				  IF CONDITION_CD=' ' THEN
				   DO;

					CONDITION_CD=SNOMED_CONDITION_CD;

				   END;


				 END;

				LABEL CONDITION_CODE=' ';

				RUN;

				proc datasets memtype=DATA;

				   delete LABTESTS3;

				quit;


				*/


				update  rdb..tmp_LABTESTS4
				set SNOMED=TEST_RESULT_VAL_CD
				where TEST_RESULT_VAL_CD   like '%[^0-9]%'
				and SUBSTRING(TEST_RESULT_VAL_CD,2,1) = '-'
				;



				update  rdb..tmp_LABTESTS4
				SET CONDITION_SHORT_NM=substring(SNOMED_CONDITION_NM,1,50)
				where TEST_RESULT_VAL_CD   like '%[^0-9]%'
				and SUBSTRING(TEST_RESULT_VAL_CD,2,1) = '-'
				and CONDITION='' or CONDITION is null
				and CONDITION_SHORT_NM is null
				;



				update  rdb..tmp_LABTESTS4
				SET  CONDITION=substring(SNOMED_CONDITION_NM,1,50)
				   --,CONDITION_SHORT_NM=SNOMED_CONDITION_NM
				where TEST_RESULT_VAL_CD   like '%[^0-9]%'
				and SUBSTRING(TEST_RESULT_VAL_CD,2,1) = '-'
				and CONDITION='' or CONDITION is null
				;


				update  rdb..tmp_LABTESTS4
				SET CONDITION_CD=SNOMED_CONDITION_CD
				where TEST_RESULT_VAL_CD   like '%[^0-9]%'
				and SUBSTRING(TEST_RESULT_VAL_CD,2,1) = '-'
				and CONDITION_CD='' or CONDITION_CD is null
				;


				update  rdb..tmp_LABTESTS4
				set Patient_Address=null
				where rtrim(Patient_Address) = ''
				;

				update  rdb..tmp_LABTESTS4
				set PROVIDER_ADDRESS=null
				where rtrim(PROVIDER_ADDRESS) = ''
				;

				update  rdb..tmp_LABTESTS4
				set ADDR_USE_CD_DESC=null
				where rtrim(ADDR_USE_CD_DESC) = ''
				;

				update  rdb..tmp_LABTESTS4
				set ADDR_CD_DESC=null
				where rtrim(ADDR_CD_DESC) = ''
				;





				/*
				DATA MISSING_SNOMED_MAP;

				SET LABTESTS4 (KEEP=SNOMED CONDITION);

				IF CONDITION = ' ';

				RUN;


				PROC SORT DATA=MISSING_SNOMED_MAP NODUPKEY OUT=MISSING_SNOMED_CONDITION_MAP;
 BY SNOMED;
 RUN;

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING tmp_MISSING_SNOMED_MAP';


		IF OBJECT_ID('rdb.dbo.tmp_MISSING_SNOMED_MAP', 'U') IS NOT NULL
				 drop table rdb..tmp_MISSING_SNOMED_MAP;



				select *
				into rdb..tmp_MISSING_SNOMED_MAP
				from rdb..tmp_labtests4
				where condition = '' or condition is null
				;



				/*

				DATA LABTESTS5(RENAME=(/*ADDRESS_USE=ADDR_USE_CD_DESC*/
				/*ADDRESS_TYPE_DESC=ADDR_CD_DESC */

				OID=PROGRAM_JURISDICTION_OID RESULT_COMMENTS=LAB_RESULT_COMMENTS
				PERSON_LOCATION_KEY=LOCATION_KEY PATIENT_CURR_GENDER=PERSON_CURR_GENDER
				SPECIMEN_DESC=SPECIMEN_SRC_DESC SPECIMEN_SRC=SPECIMEN_SRC_CD
				LAB_TEST_DATE=LAB_TEST_DT PROGRAM_AREA_CODE=PROGRAM_AREA_CD
				));



				RETAIN
				ACCESSION_NBR ALT_LAB_TEST_CD
				ALT_LAB_TEST_CD_DESC ALT_LAB_TEST_CD_SYS_CD
				ALT_LAB_TEST_CD_SYS_NM CONDITION
				CONDITION_CODE DISEASE_CATEGORY
				ELR_IND EVENT_DATE
				INTERPRETATION_FLG INVESTIGATION_STATUS
				INV_CASE_STATUS INV_LOCAL_ID
				INV_RPT_DT JURISDICTION_CD
				JURISDICTION_NM LAB_REPORT_CREATED_BY
				LAB_REPORT_CREATED_BY_UID  LAB_REPORT_DATE
				LAB_REPORT_LAST_UPDATED_BY LAB_REPORT_LAST_UPDATED_BY_UID
				LAB_RESULT_TXT_VAL LAB_RPT_CREATED_DT
				LAB_RPT_LAST_UPDATE_DT LAB_RPT_LOCAL_ID
				LAB_RPT_RECEIVED_BY_PH_DT LAB_RPT_STATUS
				LAB_TEST_DATE LAB_TEST_STATUS
				LDF_GROUP_KEY LOCAL_RESULT_CODE
				LOCAL_RESULT_NAME LOCATION_KEY
				LOINC NUMERIC_RESULT_WITHUNITS
				OID ORDERED_LABTEST_CD_SYS_NM
				ORDERED_LAB_TEST_CD ORDERED_LAB_TEST_CD_DESC
				ORDERED_TEST ORDERED_TEST_CODE
				ORDERING_FACILITY_ID ORDERING_FACILITY
				ORDERING_FACILITY_PHONE_NBR ORDERING_PROVIDER_NM
				PATIENT_ADDRESS PATIENT_CITY
				PATIENT_COUNTY  PATIENT_CURR_GENDER
				PATIENT_DOB PATIENT_FIRST_NM
				PATIENT_HISPANIC_IND PATIENT_LAST_NM
				PATIENT_LOCAL_ID PATIENT_MIDDLE_NM
				PATIENT_REPORTED_AGE PATIENT_STATE
				PATIENT_TELEPHONE PATIENT_ZIP_CODE
				PERFORMING_LAB_CLIA_NBR PERFORMING_LAB_ID
				PERFORMING_LAB_NAME PERSON_LOCATION_KEY
				PERSON_LOCATION_KEY PROGRAM_AREA_CODE
				PROGRAM_AREA_DESC PROVIDER_ADDRESS
				PROVIDER_ADDRESS_COMMENTS PROVIDER_PHONE
				PRV_ADDR_CD_DESC PRV_ADDR_USE_CD_DESC
				PATIENT_REPORTED_AGE_UNITS  PT_STREET_ADDR
				REASON_FOR_TEST_DESC REASON_FOR_TEST_DESC
				RECORD_STATUS_CD REPORTING_FACILITY
				REPORTING_FACILITY_CLIA_NBR REPORTING_FACILITY_ID
				REPORTING_FACILITY_UID REPORTING_FACILITY_PHONE_NBR
				RESULTEDTEST_CD_SYS_NM RESULTEDTEST_CD_SYS_NM
				RESULTEDTEST_VAL_CD RESULTEDTEST_VAL_CD_DESC
				RESULTED_LAB_TEST_CD RESULTED_LAB_TEST_CD_DESC
				RESULTED_LAB_TEST_KEY RESULT_COMMENTS
				RESULT_REF_RANGE_FRM RESULT_REF_RANGE_TORESULT
				RESULT_TEST_METHOD_CD SNOMED
				SPECIMEN_COLLECTION_DT SPECIMEN_DESC
				SPECIMEN_DETAILS SPECIMEN_SITE
				SPECIMEN_SITE_DESC TEST_METHOD_CD
				DOCUMENT_LINK
				TEST_METHOD_CD_DESC;

				LENGTH DISEASE_CATEGORY $40 ;



				SET LABTESTS4;

				EVENT_DATE = SPECIMEN_COLLECTION_DT;

				IF SPECIMEN_COLLECTION_DT ~= .  THEN EVENT_DATE = SPECIMEN_COLLECTION_DT;

				ELSE IF LAB_TEST_DATE ~= . THEN EVENT_DATE = LAB_TEST_DATE;

				ELSE IF LAB_RPT_RECEIVED_BY_PH_DT ~=. THEN EVENT_DATE =LAB_RPT_RECEIVED_BY_PH_DT;

				ELSE IF LAB_RPT_CREATED_DT ~=. THEN EVENT_DATE =LAB_RPT_CREATED_DT;

				WHERE RESULTED_LAB_TEST_KEY <> .;

				RUN;

				proc datasets memtype=DATA;

				   delete LABTESTS4;

				quit;




				PROC SORT DATA=LABTESTS5;
 BY RESULTED_LAB_TEST_KEY INVESTIGATION_KEY;
 RUN;

				PROC SORT DATA= LABTESTS5 OUT=RDBDATA.LAB100 (DROP=LAB_TEST_KEY CONDITION);

				 BY DESCENDING LAB_TEST_KEY ;

				RUN;




				%DBLOAD (LAB100, RDBDATA.LAB100);


				QUIT;

				*/

						     SELECT @ROWCOUNT_NO = @@ROWCOUNT;

		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',@PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);

			COMMIT TRANSACTION;

			BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1;
			SET @PROC_STEP_NAME = ' GENERATING LAB100 Table';


		IF OBJECT_ID('rdb..LAB100', 'U') IS  NULL
				 CREATE TABLE rdb.dbo.[LAB100](
						[LAB_RPT_LOCAL_ID] [varchar](50) NOT NULL,
						[RESULTED_LAB_TEST_CD] [varchar](50) NULL,
						[PROGRAM_JURISDICTION_OID] [bigint] NULL,
						[RECORD_STATUS_CD] [varchar](8) NULL,
						[RESULTED_LAB_TEST_CD_DESC] [varchar](1000) NULL,
						[RESULTEDTEST_CD_SYS_NM] [varchar](100) NULL,
						[RESULTEDTEST_VAL_CD] [varchar](20) NULL,
						[RESULTEDTEST_VAL_CD_DESC] [varchar](1000) NULL,
						[NUMERIC_RESULT_WITHUNITS] [varchar](50) NULL,
						[LAB_RESULT_TXT_VAL] [varchar](2000) NULL,
						[LAB_RESULT_COMMENTS] [varchar](2000) NULL,
						[RESULT_REF_RANGE_FRM] [varchar](20) NULL,
						[RESULT_REF_RANGE_TO] [varchar](20) NULL,
						[ALT_LAB_TEST_CD] [varchar](50) NULL,
						[ALT_LAB_TEST_CD_DESC] [varchar](1000) NULL,
						[ALT_LAB_TEST_CD_SYS_CD] [varchar](50) NULL,
						[ALT_LAB_TEST_CD_SYS_NM] [varchar](100) NULL,
						[PATIENT_KEY] [bigint] NULL,
						[ACCESSION_NBR] [varchar](199) NULL,
						[JURISDICTION_CD] [varchar](20) NULL,
						[JURISDICTION_NM] [varchar](32) NULL,
						[ORDERING_FACILITY] [varchar](100) NULL,
						[REPORTING_FACILITY] [varchar](100) NULL,
						[LAB_TEST_STATUS] [varchar](50) NULL,
						[ELR_IND] [varchar](1) NULL,
						[ORDERED_LAB_TEST_CD] [varchar](50) NULL,
						[ORDERED_LAB_TEST_CD_DESC] [varchar](1000) NULL,
						[ORDERED_LABTEST_CD_SYS_NM] [varchar](100) NULL,
						[CONDITION_CD] [varchar](72) NULL,
						[CONDITION_SHORT_NM] [varchar](50) NULL,
						[PROGRAM_AREA_CD] [varchar](20) NULL,
						[PROGRAM_AREA_DESC] [varchar](33) NULL,
						[SPECIMEN_COLLECTION_DT] [datetime] NULL,
						[SPECIMEN_SRC_DESC] [varchar](100) NULL,
						[SPECIMEN_SRC_CD] [varchar](50) NULL,
						[LAB_TEST_DT] [datetime] NULL,
						[LAB_RPT_CREATED_DT] [datetime] NULL,
						[LAB_RPT_LAST_UPDATE_DT] [datetime] NULL,
						[LAB_RPT_RECEIVED_BY_PH_DT] [datetime] NULL,
						[LAB_RPT_STATUS] [varchar](50) NULL,
						[REASON_FOR_TEST_DESC] [varchar](4000) NULL,
						[PERSON_LOCAL_ID] [varchar](50) NULL,
						[PERSON_FIRST_NM] [varchar](50) NULL,
						[PERSON_MIDDLE_NM] [varchar](50) NULL,
						[PERSON_LAST_NM] [varchar](50) NULL,
						[PERSON_DOB] [datetime] NULL,
						[AGE_REPORTED] [numeric](18, 0) NULL,
						[PATIENT_REPORTED_AGE_UNITS] [varchar](20) NULL,
						[PERSON_CURR_GENDER] [varchar](1) NULL,
						[PATIENT_ADDRESS] [varchar](725) NULL,
						[ADDR_USE_CD_DESC] [varchar](1000) NULL,
						[ADDR_CD_DESC] [varchar](1000) NULL,
						[PATIENT_CITY] [varchar](50) NULL,
						[PATIENT_COUNTY] [varchar](50) NULL,
						[PATIENT_STATE] [varchar](50) NULL,
						[PATIENT_ZIP_CODE] [varchar](20) NULL,
						[ADDRESS_DATE] [datetime] NULL,
						[ORDERING_PROVIDER_NM] [varchar](50) NULL,
						[PROVIDER_ADDRESS] [varchar](725) NULL,
						[PRV_ADDR_USE_CD_DESC] [varchar](1000) NULL,
						[PRV_ADDR_CD_DESC] [varchar](1000) NULL,
						[PROVIDER_PHONE] [varchar](50) NULL,
						[RESULTED_LAB_TEST_KEY] [bigint] NULL,
						[MORB_RPT_KEY] [bigint] NULL,
						[LDF_GROUP_KEY] [bigint] NULL,
						[INVESTIGATION_KEYS] [varchar](1000) NULL,
						[EVENT_DATE] [datetime] NULL,
						[REPORTING_FACILITY_UID] [bigint] NULL,
						[RDB_LAST_REFRESH_TIME] [datetime] NULL
					) ON [PRIMARY]
					;


                insert into rdb.dbo.[LAB100](
				       [LAB_RPT_LOCAL_ID]
					  ,[RESULTED_LAB_TEST_CD]
					  ,[PROGRAM_JURISDICTION_OID]
					  ,[RECORD_STATUS_CD]
					  ,[RESULTED_LAB_TEST_CD_DESC]
					  ,[RESULTEDTEST_CD_SYS_NM]
					  ,[RESULTEDTEST_VAL_CD]
					  ,[RESULTEDTEST_VAL_CD_DESC]
					  ,[NUMERIC_RESULT_WITHUNITS]
					  ,[LAB_RESULT_TXT_VAL]
					  ,[LAB_RESULT_COMMENTS]
					  ,[RESULT_REF_RANGE_FRM]
					  ,[RESULT_REF_RANGE_TO]
					  ,[ALT_LAB_TEST_CD]
					  ,[ALT_LAB_TEST_CD_DESC]
					  ,[ALT_LAB_TEST_CD_SYS_CD]
					  ,[ALT_LAB_TEST_CD_SYS_NM]
					  ,[PATIENT_KEY]
					  ,[ACCESSION_NBR]
					  ,[JURISDICTION_CD]
					  ,[JURISDICTION_NM]
					  ,[ORDERING_FACILITY]
					  ,[REPORTING_FACILITY]
					  ,[LAB_TEST_STATUS]
					  ,[ELR_IND]
					  ,[ORDERED_LAB_TEST_CD]
					  ,[ORDERED_LAB_TEST_CD_DESC]
					  ,[ORDERED_LABTEST_CD_SYS_NM]
					  ,[CONDITION_CD]
					  ,[CONDITION_SHORT_NM]
					  ,[PROGRAM_AREA_CD]
					  ,[PROGRAM_AREA_DESC]
					  ,[SPECIMEN_COLLECTION_DT]
					  ,[SPECIMEN_SRC_DESC]
					  ,[SPECIMEN_SRC_CD]
					  ,[LAB_TEST_DT]
					  ,[LAB_RPT_CREATED_DT]
					  ,[LAB_RPT_LAST_UPDATE_DT]
					  ,[LAB_RPT_RECEIVED_BY_PH_DT]
					  ,[LAB_RPT_STATUS]
					  ,[REASON_FOR_TEST_DESC]
					  ,[PERSON_LOCAL_ID]
					  ,[PERSON_FIRST_NM]
					  ,[PERSON_MIDDLE_NM]
					  ,[PERSON_LAST_NM]
					  ,[PERSON_DOB]
					  ,[AGE_REPORTED]
					  ,[PATIENT_REPORTED_AGE_UNITS]
					  ,[PERSON_CURR_GENDER]
					  ,[PATIENT_ADDRESS]
					  ,[ADDR_USE_CD_DESC]
					  ,[ADDR_CD_DESC]
					  ,[PATIENT_CITY]
					  ,[PATIENT_COUNTY]
					  ,[PATIENT_STATE]
					  ,[PATIENT_ZIP_CODE]
					  ,[ADDRESS_DATE]
					  ,[ORDERING_PROVIDER_NM]
					  ,[PROVIDER_ADDRESS]
					  ,[PRV_ADDR_USE_CD_DESC]
					  ,[PRV_ADDR_CD_DESC]
					  ,[PROVIDER_PHONE]
					  ,[RESULTED_LAB_TEST_KEY]
					  ,[MORB_RPT_KEY]
					  ,[LDF_GROUP_KEY]
					  ,[INVESTIGATION_KEYS]
					  ,[EVENT_DATE]
					  ,[REPORTING_FACILITY_UID]
					  ,[RDB_LAST_REFRESH_TIME]
					  )
				SELECT distinct [LAB_RPT_LOCAL_ID]
					            , substring(RESULTED_LAB_TEST_CD ,1,50)
								,oid
								, substring(RECORD_STATUS_CD ,1,8)
								, substring(rtrim(RESULTED_LAB_TEST_CD_DESC) ,1,1000)
								, substring(RESULTEDTEST_CD_SYS_NM ,1,100)
								, substring(RESULTEDTEST_VAL_CD ,1,20)
								, substring(RESULTEDTEST_VAL_CD_DESC ,1,1000)
								, substring(NUMERIC_RESULT_WITHUNITS ,1,50)
								, substring(rtrim(LAB_RESULT_TXT_VAL ),1,2000)
								, substring(rtrim(LAB_RESULT_COMMENTS) ,1,2000)
								, substring(RESULT_REF_RANGE_FRM ,1,20)
								, substring(RESULT_REF_RANGE_TO ,1,20)
								, substring(ALT_LAB_TEST_CD ,1,50)
								, substring(ALT_LAB_TEST_CD_DESC ,1,1000)
								, substring(ALT_LAB_TEST_CD_SYS_CD ,1,50)
								, substring(ALT_LAB_TEST_CD_SYS_NM ,1,100)
								,PATIENT_KEY
								, substring(ACCESSION_NBR ,1,199)
								, substring(JURISDICTION_CD ,1,20)
								, substring(JURISDICTION_NM ,1,32)
								, substring(ORDERING_FACILITY ,1,100)
								, substring(REPORTING_FACILITY ,1,100)
								, substring(LAB_TEST_STATUS ,1,50)
								, substring(ELR_IND ,1,1)
								, substring(ORDERED_LAB_TEST_CD ,1,50)
								, substring(ORDERED_LAB_TEST_CD_DESC ,1,1000)
								, substring(ORDERED_LABTEST_CD_SYS_NM ,1,100)
								, substring(CONDITION_CD ,1,72)
								, substring(CONDITION_SHORT_NM ,1,50)
								, substring(PROG_AREA_CD ,1,20)
								, substring(PROG_AREA_DESC_TXT ,1,33)
								,SPECIMEN_COLLECTION_DT
								, substring(SPECIMEN_SRC_DESC ,1,100)
								, substring(SPECIMEN_SRC_CD ,1,50)
								,LAB_TEST_DT
								,LAB_RPT_CREATED_DT
								,LAB_RPT_LAST_UPDATE_DT
								,LAB_RPT_RECEIVED_BY_PH_DT
								, substring(LAB_RPT_STATUS ,1,50)
								, substring(REASON_FOR_TEST_DESC ,1,4000)
								, substring(PERSON_LOCAL_ID ,1,50)
								, substring(PERSON_FIRST_NM ,1,50)
								, substring(PERSON_MIDDLE_NM ,1,50)
								, substring(PERSON_LAST_NM ,1,50)
								,PERSON_DOB
								,AGE_REPORTED
								, substring(rtrim(PATIENT_REPORTED_AGE_UNITS) ,1,20)
								, substring(PERSON_CURR_GENDER ,1,1)
								, substring(PATIENT_ADDRESS ,1,725)
								, substring(ADDR_USE_CD_DESC ,1,1000)
								, substring(ADDR_CD_DESC ,1,1000)
								, substring(rtrim(PATIENT_CITY) ,1,50)
								, substring(PATIENT_COUNTY ,1,50)
								, substring(PATIENT_STATE ,1,50)
								, substring(PATIENT_ZIP_CODE ,1,20)
								  , null as [ADDRESS_DATE]
								, rtrim(ltrim(substring(ORDERING_PROVIDER_NM ,1,50)))
								, substring(PROVIDER_ADDRESS ,1,725)
								, substring(PRV_ADDR_USE_CD_DESC ,1,1000)
								, substring(PRV_ADDR_CD_DESC ,1,1000)
								, substring(PROVIDER_PHONE ,1,50)
								,RESULTED_LAB_TEST_KEY
								,MORB_RPT_KEY
								,LDF_GROUP_KEY
								, substring(INVESTIGATION_KEYS ,1,1000)
								  , coalesce(SPECIMEN_COLLECTION_DT,LAB_TEST_DT,LAB_RPT_RECEIVED_BY_PH_DT ,LAB_RPT_CREATED_DT) as [EVENT_DATE]
								,REPORTING_FACILITY_UID
								  ,current_timestamp as [RDB_LAST_REFRESH_TIME]

				 --into rdb..LAB100
				  FROM [RDB].dbo.[tmp_labtests4]
				  where  LAB_RPT_LOCAL_ID is not null
				  ;




			SELECT @ROWCOUNT_NO = @@ROWCOUNT;
		     INSERT INTO RDB.dbo.[JOB_FLOW_LOG]
				(BATCH_ID,[DATAFLOW_NAME],[PACKAGE_NAME] ,[STATUS_TYPE],[STEP_NUMBER],[STEP_NAME],[ROW_COUNT])
				VALUES(@BATCH_ID,'LAB100_DATAMART','RDB.LAB100_DATAMART','START',  @PROC_STEP_NO,@PROC_STEP_NAME,@ROWCOUNT_NO);


			COMMIT TRANSACTION;


			 --IF OBJECT_ID('rdb.dbo.TMP_lab_test_resultInit', 'U') IS NOT NULL
			 --drop table   rdb.dbo.TMP_lab_test_resultInit ;

     		    IF OBJECT_ID('rdb..TMP_LABTEST_LABTESTRESULT', 'U') IS NOT NULL  drop table    	rdb..TMP_LABTEST_LABTESTRESULT	;
				IF OBJECT_ID('rdb..tmp_LABTEST_RESULTS_VAL', 'U') IS NOT NULL  drop table    	rdb..tmp_LABTEST_RESULTS_VAL	;
				IF OBJECT_ID('rdb..TMP_LABTEST_LABTESTRESULT', 'U') IS NOT NULL  drop table    	rdb..TMP_LABTEST_LABTESTRESULT	;
				IF OBJECT_ID('rdb..TMP_LABTEST_ORDER', 'U') IS NOT NULL  drop table    	rdb..TMP_LABTEST_ORDER	;
				IF OBJECT_ID('rdb..TMP_LABTEST_RESULT', 'U') IS NOT NULL  drop table    	rdb..TMP_LABTEST_RESULT	;
				IF OBJECT_ID('rdb..tmp_DELETEDMORBS', 'U') IS NOT NULL  drop table    	rdb..tmp_DELETEDMORBS	;
				IF OBJECT_ID('rdb..tmp_LAB_RESULT_VALMODIFIED', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_RESULT_VALMODIFIED	;
				IF OBJECT_ID('rdb.dbo.tmp_LABTEST_RESULTS_VAL', 'U') IS NOT NULL  drop table    	rdb.dbo.tmp_LABTEST_RESULTS_VAL	;
				IF OBJECT_ID('rdb..tmp_LAB_RESULT_COMMENT', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_RESULT_COMMENT	;
				IF OBJECT_ID('rdb..tmp_LABTEST_RESULTS_VAL_COMMENT', 'U') IS NOT NULL  drop table    	rdb..tmp_LABTEST_RESULTS_VAL_COMMENT	;
				IF OBJECT_ID('rdb..tmp_LABTEST_RESULTS_VAL1', 'U') IS NOT NULL  drop table    	rdb..tmp_LABTEST_RESULTS_VAL1	;
				IF OBJECT_ID('rdb..TMP_LABTEST_UPDATED', 'U') IS NOT NULL  drop table    	RDB..TMP_LABTEST_UPDATED	;
				IF OBJECT_ID('rdb..tmp_LABTEST_ORDER1', 'U') IS NOT NULL  drop table    	rdb..tmp_LABTEST_ORDER1	;
				IF OBJECT_ID('rdb..tmp_LAB_RESULTS_ORDER_CONTACT1', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_RESULTS_ORDER_CONTACT1	;
				IF OBJECT_ID('rdb..tmp_LAB_RESULTS_ORDER_CONTACT2', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_RESULTS_ORDER_CONTACT2	;
				IF OBJECT_ID('rdb..tmp_PERSON_ORDER_PROVIDER', 'U') IS NOT NULL  drop table    	rdb..tmp_PERSON_ORDER_PROVIDER	;
				IF OBJECT_ID('rdb..tmp_lab_REPORTING_ORG', 'U') IS NOT NULL  drop table    	rdb..tmp_lab_REPORTING_ORG	;
				IF OBJECT_ID('rdb..tmp_ORDERING_ORG', 'U') IS NOT NULL  drop table    	rdb..tmp_ORDERING_ORG	;
				IF OBJECT_ID('rdb..tmp_LAB_ENTITY1', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_ENTITY1	;
				IF OBJECT_ID('rdb..tmp_LAB_ENTITY2', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_ENTITY2	;
				IF OBJECT_ID('rdb..tmp_LAB_ORDER_ENTITY1', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_ORDER_ENTITY1	;
				IF OBJECT_ID('rdb..tmp_LAB_ORDER_ENTITY_KEY', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_ORDER_ENTITY_KEY	;
				IF OBJECT_ID('rdb..tmp_LAB_ORDER_ENTITY11', 'U') IS NOT NULL  drop table    	rdb..tmp_LAB_ORDER_ENTITY11	;
				IF OBJECT_ID('rdb..tmp_lab_order_entity11_invkeys', 'U') IS NOT NULL  drop table    	rdb..tmp_lab_order_entity11_invkeys	;
				IF OBJECT_ID('rdb..[tmp_LAB_ORDER_ENTITY]', 'U') IS NOT NULL  drop table    	RDB..[tmp_LAB_ORDER_ENTITY]	;
				IF OBJECT_ID('rdb..tmp_LABTESTSINIT', 'U') IS NOT NULL  drop table    	rdb..tmp_LABTESTSINIT	;
				IF OBJECT_ID('rdb..tmp_labtests', 'U') IS NOT NULL  drop table    	rdb..tmp_labtests	;
				IF OBJECT_ID('rdb..tmp_LABTESTS2', 'U') IS NOT NULL  drop table    	rdb..tmp_LABTESTS2	;
				IF OBJECT_ID('rdb..tmp_MISSING_LOINC_MAP', 'U') IS NOT NULL  drop table    	rdb..tmp_MISSING_LOINC_MAP	;
				IF OBJECT_ID('rdb..tmp_LABTESTS4', 'U') IS NOT NULL  drop table    	rdb..tmp_LABTESTS4	;
				IF OBJECT_ID('rdb..tmp_MISSING_SNOMED_MAP', 'U') IS NOT NULL  drop table    	rdb..tmp_MISSING_SNOMED_MAP	;
				IF OBJECT_ID('RDB..tmp_LABTESTS3', 'U') IS NOT NULL   		 DROP TABLE  rdb..tmp_LABTESTS3 ;


		       IF OBJECT_ID('RDB.DBO.TMP_LABTEST_RESULTS_VAL_COMMENT1', 'U') IS NOT NULL
				 DROP TABLE  RDB..TMP_LABTEST_RESULTS_VAL_COMMENT1;

            BEGIN TRANSACTION;

			SET @PROC_STEP_NO =  @PROC_STEP_NO + 1 ;

			SET @Proc_Step_Name = 'SP_COMPLETE';


					INSERT INTO rdb.dbo.[job_flow_log] (
							batch_id
							,[Dataflow_Name]
						   ,[package_Name]
							,[Status_Type]
						   ,[step_number]
						   ,[step_name]
						   ,[row_count]
						   )
						   VALUES
						   (
						   @batch_id,
						   'D_LAB100'
						   ,'RDB.D_LAB100'
						   ,'COMPLETE'
						   ,@Proc_Step_no
						   ,@Proc_Step_name
						   ,@RowCount_no
						   );


  	COMMIT TRANSACTION;
  END TRY

  BEGIN CATCH



     IF @@TRANCOUNT > 0   ROLLBACK TRANSACTION;



	DECLARE @ErrorNumber INT = ERROR_NUMBER();
    DECLARE @ErrorLine INT = ERROR_LINE();
    DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
    DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
    DECLARE @ErrorState INT = ERROR_STATE();


    INSERT INTO rdb.dbo.[job_flow_log] (
		    batch_id
		   ,[Dataflow_Name]
		   ,[package_Name]
		    ,[Status_Type]
           ,[step_number]
           ,[step_name]
           ,[Error_Description]
		   ,[row_count]
           )
		   VALUES
           (
           @batch_id
           ,'D_LAB100'
           ,'RDB.D_LAB100'
		   ,'ERROR'
		   ,@Proc_Step_no
		   ,'ERROR - '+ @Proc_Step_name
           , 'Step -' +CAST(@Proc_Step_no AS VARCHAR(3))+' -' +CAST(@ErrorMessage AS VARCHAR(500))
           ,0
		   );


      return -1 ;

	END CATCH

END

;